


#include <windows.h>
#include "md4.h"
#include "sha1.h"








void GetMasterKey(uint8_t *PasswordHashHash, uint8_t *NTResponse, uint8_t *MasterKey)
{
	uint8_t Magic1[27] = 
	{
		0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74,
		0x68, 0x65, 0x20, 0x4d, 0x50, 0x50, 0x45, 0x20, 0x4d,
		0x61, 0x73, 0x74, 0x65, 0x72, 0x20, 0x4b, 0x65, 0x79
	};
	uint8_t  Digest[20];
	SHA1_CTX *Context = new SHA1_CTX;
	memset(Digest,0,20);//20-octet Digest
	SHA1Init(Context);
	SHA1Update(Context, PasswordHashHash, 16);
	SHA1Update(Context, NTResponse, 24);
	SHA1Update(Context, Magic1, 27);
	SHA1Final(Digest, Context);
	memmove(MasterKey, Digest, 16);
}



void GetAsymetricStartKey(uint8_t *MasterKey, uint8_t *SessionKey, int SessionKeyLength, bool IsServer )
{
	uint8_t Magic2[84] =
	{
		0x4f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69,
		0x65, 0x6e, 0x74, 0x20, 0x73, 0x69, 0x64, 0x65, 0x2c, 0x20,
		0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
		0x65, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x6b, 0x65, 0x79,
		0x3b, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
		0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x69, 0x64, 0x65,
		0x2c, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
		0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20,
		0x6b, 0x65, 0x79, 0x2e
	};
	uint8_t Magic3[84] =
	{
		0x4f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69,
		0x65, 0x6e, 0x74, 0x20, 0x73, 0x69, 0x64, 0x65, 0x2c, 0x20,
		0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
		0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x20,
		0x6b, 0x65, 0x79, 0x3b, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68,
		0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73,
		0x69, 0x64, 0x65, 0x2c, 0x20, 0x69, 0x74, 0x20, 0x69, 0x73,
		0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20,
		0x6b, 0x65, 0x79, 0x2e
	};
	uint8_t SHSpad1[40] =
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	uint8_t SHSpad2[40] =
	{
		0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,
		0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,
		0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,
		0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2
	};
	uint8_t  Digest[20];
	SHA1_CTX *Context = new SHA1_CTX;
	memset(Digest,0,20);//20-octet Digest
	uint8_t * s;
	if (IsServer) 
	{
		s = Magic3;
	} 
	else 
	{
		s = Magic2;
	}
	SHA1Init(Context);
	SHA1Update(Context, MasterKey, 16);
	SHA1Update(Context, SHSpad1, 40);
	SHA1Update(Context, s, 84);
	SHA1Update(Context, SHSpad2, 40);
	SHA1Final(Digest, Context);
	memmove(SessionKey,Digest,SessionKeyLength);
}

void GetNewKeyFromSHA(uint8_t *StartKey, uint8_t *SessionKey, unsigned long SessionKeyLength, uint8_t *InterimKey)
{
	uint8_t SHApad1[40] =
	{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	uint8_t SHApad2[40] =
	{
		0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,
		0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,
		0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2,
		0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2, 0xf2
	};
	uint8_t  Digest[20];
	SHA1_CTX *Context = new SHA1_CTX;
	memset(Digest,0,20);//20-octet Digest
	SHA1Init(Context);
	SHA1Update(Context, StartKey, SessionKeyLength);
	SHA1Update(Context, SHApad1, 40);
	SHA1Update(Context, SessionKey, SessionKeyLength);
	SHA1Update(Context, SHApad2, 40);
	SHA1Final(Digest, Context);
	memmove(InterimKey, Digest, SessionKeyLength);
}









int init_start_key(uint8_t * password_hash,uint8_t * nt_response,uint8_t *server_session_key,uint8_t *client_session_key,uint8_t * servermasterkey,uint8_t *clientmasterkey,int encryptbits)
{
	uint8_t password_hash_hash[16] = {0};
	md4(password_hash, 16, password_hash_hash);

	// master_key
	uint8_t master_key[16] = {0};
	memset(master_key, 0, 16);
	GetMasterKey(password_hash_hash, nt_response,master_key);

	// get start_key
	//uint8_t  server_master_key[16]= {0};
	//uint8_t client_master_key[16] = {0};
	//GetAsymetricStartKey(master_key, server_master_key, 16, 1);
	//GetAsymetricStartKey(master_key, client_master_key, 16, 0);
	if (encryptbits == 128)
	{
		GetAsymetricStartKey(master_key, servermasterkey, 16, 1);
		GetAsymetricStartKey(master_key, clientmasterkey, 16, 0);

		// get session_key
		uint8_t interim_key[20] = {0};
		GetNewKeyFromSHA(servermasterkey, servermasterkey, 16, interim_key);
		memcpy(server_session_key, interim_key, MPPE_MAX_KEY_LEN);

		GetNewKeyFromSHA(clientmasterkey, clientmasterkey, 16, interim_key);
		memcpy(client_session_key, interim_key, MPPE_MAX_KEY_LEN);
	}else if (encryptbits == 56)
	{
		GetAsymetricStartKey(master_key, servermasterkey, 8, 1);
		GetAsymetricStartKey(master_key, clientmasterkey, 8, 0);

		// get session_key
		uint8_t interim_key[20] = {0};
		GetNewKeyFromSHA(servermasterkey, servermasterkey , 8, interim_key);
		*server_session_key = 0xd1;
		memcpy(server_session_key + 1,interim_key,7);
		//memcpy(server_session_key, interim_key, MPPE_MAX_KEY_LEN);

		GetNewKeyFromSHA(clientmasterkey, clientmasterkey , 8, interim_key);
		//memcpy(client_session_key, interim_key, MPPE_MAX_KEY_LEN);
		*client_session_key = 0xd1;
		memcpy(client_session_key + 1,interim_key,7);
	}else if (encryptbits == 40)
	{
		GetAsymetricStartKey(master_key, servermasterkey, 8, 1);
		GetAsymetricStartKey(master_key, clientmasterkey, 8, 0);

		// get session_key
		uint8_t interim_key[20] = {0};
		GetNewKeyFromSHA(servermasterkey, servermasterkey, 8, interim_key);
		//memcpy(server_session_key, interim_key, MPPE_MAX_KEY_LEN);
		*server_session_key = 0xd1;
		*(server_session_key+1) = 0x26;
		*(server_session_key+2) = 0x9e;
		memcpy(server_session_key + 3,interim_key,5);

		GetNewKeyFromSHA(clientmasterkey, clientmasterkey, 8, interim_key);
		//memcpy(client_session_key, interim_key, MPPE_MAX_KEY_LEN);
		*client_session_key = 0xd1;
		*(client_session_key+1) = 0x26;
		*(client_session_key+2) = 0x9e;
		memcpy(client_session_key + 3,interim_key,5);
	}else{
		return FALSE;
	}
}